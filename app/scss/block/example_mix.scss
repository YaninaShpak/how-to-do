@use 'sass:math';

// Центровка блока

@mixin centering-container($width-screen) {
  width: $width-screen;
  margin: 0 auto;
  padding: 0 10px;
}

.wrapper {
  @include centering-container(1200px);
}

// Центровка содержимого блока с помощью флексов

@mixin centering-flex($flex-direction) {
  display: flex;
  flex-direction: $flex-direction;
  justify-content: center;
  align-items: center;
}

.flex {
  @include centering-flex(column);
}

// Центровка с абсолютным позиционированием

@mixin centering-abst-xy() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin centering-abst-x() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

@mixin centering-abst-y() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin pseudo-element() {
  position: absolute;
  content: '';
}

// Позиционирование элемента по центру

.box {
  position: relative;
}

@mixin zero-centered($width, $height) {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  width: $width;
  height: $height;
}

.centered-box {
  @include zero-centered(100px, 100px);
  
}

h1 {
  color: invert(red);
}

h2 {
  position: relative;
}

h2::after {
  @include pseudo-element();
  width: 100px;
  height: 5px;
  background-color: violet;
  bottom: 0;
  @include centering-abst-x();
}

//Плейсхолдер/Placeholder
@mixin placeholder($color, $size, $weight) { 
  &::-webkit-input-placeholder { 
    color: $color; 
    font-size: $size; 
    font-weight: $weight; 
  } 
  &:-moz-placeholder { 
    color: $color; 
    font-size: $size; 
    font-weight: $weight; 
  } 
  &::-moz-placeholder { 
    color: $color; 
    font-size: $size; 
    font-weight: $weight; 
  } 
  &:-ms-input-placeholder { 
    color: $color; 
    font-size: $size; 
    font-weight: $weight; 
  } 
} 

// ? CSS-фигуры

// CSS-треугольники
@mixin triangle($width, $direction, $color) { 
  width: 0; 
  height: 0; 
  @if $direction == up { 
    border-left: $width solid transparent; 
    border-right: $width solid transparent; 
    border-bottom: $width solid $color; 
  } 
  @if $direction == down { 
    border-left: $width solid transparent; 
    border-right: $width solid transparent; 
    border-top: $width solid $color; 
  } 
  @if $direction == left { 
    border-top: $width solid transparent; 
    border-bottom: $width solid transparent; 
    border-right: $width solid $color; 
  } 
  @if $direction == right { 
    border-top: $width solid transparent; 
    border-bottom: $width solid transparent; 
    border-left: $width solid $color; 
  } 
} 

//
@mixin triangle($direction: top, $size, $color) {
  width: 0;
  height: 0;
  border-width: $size;
  border-style: solid;
  border-color: $color;
  border-left-color: transparent;
  border-right-color: transparent;
  border-top-style: none;

  @if $direction == right {
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-right-style: none;
  }

  @if $direction == bottom {
    border-left-color: transparent;
    border-right-color: transparent;
    border-bottom-style: none;
  }

  @if $direction == left {
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-left-style: none;
  }
}

.triangle-box-top {
  @include triangle(top, 50px, #ff4136);
}

.triangle-box-right {
  @include triangle(right, 50px, #0074d9);
}

.triangle-box-bottom {
  @include triangle(bottom, 50px, #2ecc40);
}

.triangle-box-left {
  @include triangle(left, 50px, #b10dc9);
  
}

// CSS-квадрат

@mixin square($square, $border-weight, $color, $bg-color: false, $adapt) {
  width: $square;
  height: $square;
  border: $border-weight solid $color;
  @if $bg-color {
    background-color: $bg-color;
  }
}

// CSS-круг

@mixin circle($diameter, $border-weight, $color, $bg-color: false) {
  width: $diameter;
  height: $diameter;
  border: $border-weight solid $color;
  border-radius: 50%;
  @if $bg-color {
    background-color: $bg-color;
  }
}

// Media Query Экономим время при адаптации к мобильным устройствам, используя точки, установленные по умолчанию: 
$breakpoints: ( "phone": 480px, "tablet": 768px, "desktop": 1200px, ); 

@mixin mq($width, $type: min) { 
  @if map_has_key($breakpoints, $width) { 
    $width: map_get($breakpoints, $width); 
    @if $type == max { $width: $width - 1px; } 
    @media only screen and (#{$type}-width: $width) { @content; } 
  } 
} 
// Стили для шрифтов
@mixin font-open-sans($size: false, $color: false, $weight: false, $lh: false) { 
  font-family: 'Open Sans', sans-serif; 
  @if $size { 
    font-size: $size; 
  } 
  @if $color { 
    color: $color; 
  } 
  @if $weight { 
    font-weight: $weight; 
  } 
  @if $lh { 
    line-height: $lh; 
  } 
} 

// !Миксины с условием

// Типы параметров

@mixin variables($param) {
  @if (iscolor($param)) {
    background-color: $param;
  }
}

.squaire {
  @include variables(rgb(30, 165, 120));
}

// ? Для ссылок

// Псевдоклассы для ссылок 
@mixin link ($display: false, $link, $visit, $hover, $active) { 
  a { 
    @if $display {
      display: $display;
    }
    text-decoration: none;
    color: $link; 
      &:visited { color: $visit; }
      &:hover { color: $hover; } 
      &:active { color: $active; } 
  } 
}

// Сброс стилей для списка

@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

// Функции для расчета единиц измерения

// TO %
// $pxOne - наши пиксели, которые нужно перевести в проценты
// $pxTwo - ширина родителя
@function prc($pxOne, $pxTwo) {
  $result: math.div($pxOne, $pxTwo) * 100%;
  @return $result;
}

// REM

@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

// EM
@function em($px) {
  $result: math.div($px, 16) + em;
  @return $result;
}

// Подключение

.title {
  font-size: rem(42);
}

// Адаптивное свойство
// $maxWidth - ширина полотна
// $maxWidthContainer - ширина ограничивающего контейнера (?)
// $property - свойство размеры которого высчитываем
// $startSize - размер на ширине полотна
// $minSize - размер на минимальной ширине полотна
// $type - режим по которому нужно менять размеры свойства
$maxWidth: 1920;
$maxWidthContainer: 1170;

@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    // Всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

/** Оформление чекбокса если импут обернут в лэйбл*/

.user-checkbox {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;
}



.login-checkbox {
  position: relative;

  padding-left: 30px;

  cursor: pointer;
}

.login-checkbox:hover,
.login-checkbox:focus {
  color: #663d15;
}

.login-checkbox input[type="checkbox"]+.checkbox-indicator {
  position: absolute;
  left: 0;
  top: 0;

  width: 17px;
  height: 17px;

  border: 2px solid #000000;
}

.login-checkbox input[type="checkbox"]:focus+.checkbox-indicator {
  border-color: #663d15;
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

.login-checkbox input[type="checkbox"]:checked+.checkbox-indicator::before,
.login-checkbox input[type="checkbox"]:checked+.checkbox-indicator::after {
  content: "";
  position: absolute;
  left: 1px;
  top: 8px;

  width: 15px;
  height: 2px;

  background-color: #000000;
}

.login-checkbox input[type="checkbox"]:checked+.checkbox-indicator::before {
  transform: rotate(45deg);
}

.login-checkbox input[type="checkbox"]:checked+.checkbox-indicator::after {
  transform: rotate(-45deg);
}

.restore {
  position: relative;

  &::before {
    @include pseudo-element();
    @include circle(20px, 2px, #384566, #454545);
    top: 0;
    left: -30px;
  }
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}




